{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\lectures\\\\nomad_coder\\\\react-masterclass\\\\react-masterclass_2\\\\my-app\\\\src\\\\routes\\\\Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId), {\n    refetchInterval: 10000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading char...\" : /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      type: \"candlestick\",\n      series: [{\n        data: data === null || data === void 0 ? void 0 : data.map(price => ({\n          x: price.time_close,\n          y: [price.open.toFixed(2), price.high.toFixed(2), price.low.toFixed(2), price.close.toFixed(2)]\n        }))\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          type: \"candlestick\",\n          height: 300,\n          width: 300,\n          toolbar: {\n            show: true\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: true\n        },\n        yaxis: {\n          floating: false,\n          tooltip: {\n            enabled: true\n          }\n        },\n        xaxis: {\n          labels: {\n            show: true\n          },\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true\n          },\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        },\n        tooltip: {\n          y: {\n            formatter: value => `$ ${value.toFixed(2)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 49\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chart, \"aX9tqtj1swFe4id2wUC5vkzN/5w=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["D:/workspace/lectures/nomad_coder/react-masterclass/react-masterclass_2/my-app/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ReactApexChart","Chart","coinId","isLoading","data","refetchInterval","map","price","x","time_close","y","open","toFixed","high","low","close","theme","mode","chart","type","height","width","toolbar","show","background","grid","yaxis","floating","tooltip","enabled","xaxis","labels","axisTicks","axisBorder","categories","formatter","value"],"mappings":";;;AAAA,SAAqBA,QAArB,QAAqC,aAArC;AAEA,SAASC,gBAAT,QAAiC,OAAjC;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAeA,SAASC,KAAT,OAAkC;AAAA;;AAAA,MAAnB;AAACC,IAAAA;AAAD,GAAmB;AAC9B,QAAM;AAACC,IAAAA,SAAD;AAAWC,IAAAA;AAAX,MAAmBN,QAAQ,CACjC,CAAC,OAAD,EAASI,MAAT,CADiC,EAEhC,MAAMH,gBAAgB,CAACG,MAAD,CAFU,EAGhC;AACIG,IAAAA,eAAe,EAAE;AADrB,GAHgC,CAAjC;AAOA,sBAAO;AAAA,cAAMF,SAAS,GAAG,iBAAH,gBAAsB,QAAC,cAAD;AAAgB,MAAA,IAAI,EAAC,aAArB;AAC5C,MAAA,MAAM,EAAE,CACJ;AACKC,QAAAA,IAAI,EAACA,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEE,GAAN,CAAWC,KAAD,KAAU;AAClBC,UAAAA,CAAC,EAACD,KAAK,CAACE,UADU;AAElBC,UAAAA,CAAC,EAAC,CAACH,KAAK,CAACI,IAAN,CAAWC,OAAX,CAAmB,CAAnB,CAAD,EACFL,KAAK,CAACM,IAAN,CAAWD,OAAX,CAAmB,CAAnB,CADE,EAEDL,KAAK,CAACO,GAAN,CAAUF,OAAV,CAAkB,CAAlB,CAFC,EAGFL,KAAK,CAACQ,KAAN,CAAYH,OAAZ,CAAoB,CAApB,CAHE;AAFgB,SAAV,CAAV;AADV,OADI,CADoC;AAY5C,MAAA,OAAO,EAAE;AACLI,QAAAA,KAAK,EAAC;AACFC,UAAAA,IAAI,EAAC;AADH,SADD;AAILC,QAAAA,KAAK,EAAC;AACFC,UAAAA,IAAI,EAAC,aADH;AAEFC,UAAAA,MAAM,EAAC,GAFL;AAGFC,UAAAA,KAAK,EAAC,GAHJ;AAINC,UAAAA,OAAO,EAAC;AACJC,YAAAA,IAAI,EAAC;AADD,WAJF;AAONC,UAAAA,UAAU,EAAC;AAPL,SAJD;AAcNC,QAAAA,IAAI,EAAC;AACAF,UAAAA,IAAI,EAAC;AADL,SAdC;AAiBTG,QAAAA,KAAK,EAAC;AACFC,UAAAA,QAAQ,EAAC,KADP;AAEFC,UAAAA,OAAO,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AAFP,SAjBG;AAwBTC,QAAAA,KAAK,EAAC;AACFC,UAAAA,MAAM,EAAC;AAACR,YAAAA,IAAI,EAAC;AAAN,WADL;AAEFS,UAAAA,SAAS,EAAC;AAACT,YAAAA,IAAI,EAAC;AAAN,WAFR;AAGFU,UAAAA,UAAU,EAAC;AAACV,YAAAA,IAAI,EAAC;AAAN,WAHT;AAIDJ,UAAAA,IAAI,EAAC,UAJJ;AAKDe,UAAAA,UAAU,EAAE9B,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAUC,KAAK,IAAEA,KAAK,CAACE,UAAvB;AALX,SAxBG;AAiCTmB,QAAAA,OAAO,EAAC;AACJlB,UAAAA,CAAC,EAAE;AACCyB,YAAAA,SAAS,EAAGC,KAAD,IAAY,KAAIA,KAAK,CAACxB,OAAN,CAAc,CAAd,CAAiB;AAD7C;AADC;AAjCC;AAZmC;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AAsDH;;GA9DQX,K;UACoBH,Q;;;KADpBG,K;AA+DT,eAAeA,KAAf","sourcesContent":["import { useQueries, useQuery } from \"react-query\";\r\nimport { useParams } from \"react-router\";\r\nimport { fetchCoinHistory } from \"./api\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\ninterface IHistorical {\r\n    time_open: string;\r\ntime_close: string;\r\nhigh:number;\r\nopen:number; \r\nlow: number;\r\nclose: number;\r\nvolume:number;\r\nmarket_cap:number;\r\n}\r\n\r\ninterface CharProps{\r\n    coinId:string;\r\n}\r\nfunction Chart({coinId}:CharProps){\r\n    const {isLoading,data} = useQuery<IHistorical[]>(\r\n    [\"ohlcv\",coinId],\r\n     () => fetchCoinHistory(coinId),\r\n     {\r\n         refetchInterval: 10000,\r\n     }\r\n     );\r\n    return(<div>{isLoading ? \"Loading char...\": <ReactApexChart type=\"candlestick\" \r\n    series={[\r\n        {\r\n             data:data?.map((price)=>({\r\n                    x:price.time_close,\r\n                    y:[price.open.toFixed(2), \r\n                    price.high.toFixed(2),\r\n                     price.low.toFixed(2),\r\n                    price.close.toFixed(2)],\r\n                })) \r\n        }\r\n    ]}\r\n    options={{\r\n        theme:{\r\n            mode:\"dark\"\r\n        },\r\n        chart:{ \r\n            type:\"candlestick\",\r\n            height:300,\r\n            width:300,\r\n        toolbar:{\r\n            show:true,\r\n        },  \r\n        background:\"transparent\",\r\n      },\r\n     \r\n       grid:{\r\n            show:true,\r\n        },\r\n    yaxis:{\r\n        floating:false,\r\n        tooltip: {\r\n            enabled: true\r\n          }\r\n        \r\n    },\r\n    xaxis:{\r\n        labels:{show:true},\r\n        axisTicks:{show:true},\r\n        axisBorder:{show:true},\r\n         type:\"datetime\",\r\n         categories: data?.map(price=>price.time_close),\r\n       \r\n    },\r\n   \r\n    tooltip:{\r\n        y: {\r\n            formatter: (value) => `$ ${value.toFixed(2)}`,\r\n        }\r\n    }\r\n    }}\r\n   />\r\n   }</div>);\r\n   \r\n}\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}